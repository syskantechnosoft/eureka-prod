apiVersion: apps/v1
kind: Deployment
metadata:
  name: eureka-server
  namespace: microservices
  labels:
    app: eureka-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: eureka-server
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: eureka-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8761"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - eureka-server
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: eureka-server
        image: yourorg/eureka-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8761
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod,kubernetes"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: VAULT_HOST
          value: "vault-service"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-credentials
              key: token
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: eureka-credentials
              key: username
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eureka-credentials
              key: password
        - name: JAVA_OPTS
          value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8761
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8761
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: eureka-server-config
      - name: tmp-volume
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: eureka-service
  namespace: microservices
  labels:
    app: eureka-server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8761"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 8761
    targetPort: 8761
    protocol: TCP
    name: http
  selector:
    app: eureka-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: eureka-ingress
  namespace: microservices
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - eureka.example.com
    secretName: eureka-tls-secret
  rules:
  - host: eureka.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: eureka-service
            port:
              number: 8761
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eureka-server-config
  namespace: microservices
data:
  application-kubernetes.yml: |
    eureka:
      instance:
        hostname: eureka-service
        prefer-ip-address: true
      client:
        registerWithEureka: false
        fetchRegistry: false
        service-url:
          defaultZone: http://eureka-service:8761/eureka/
      server:
        enable-self-preservation: true
        
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          probes:
            enabled: true
